#include "btree_iterator.h"
 
template <typename T>
T& btree_iterator<T>::operator*() const{
  if( _index >= _pTree->_vec.size()){
    return _pTree->_vec.back().first;
  }
  return _pTree->_vec[_index].first;
}
template <typename T>
T* btree_iterator<T>::operator->() const{
  if( _index > _pTree->_maxNodeElems){
    return &_pTree->_vec.back().first;
  }
  return &_pTree->_vec[_index].first;
}
template <typename T>
btree_iterator<T>& btree_iterator<T>::operator++() {
  cout << "iterator ++" <<endl;
  // step right and go as deep as possible
//    cout << "print all values of parent: "<<*_pTree->_parent<<endl;
  ++_index;
  if(_index < _pTree->_vec.size()){
    cout << "\tfirst" <<endl;
    if( goLeft()){
      cout << "\tgoLeft()"<<endl;
    }
  // if vector has ended we should go to last
  }else if( _pTree->_last !=nullptr && !_pTree->_last->isEmpty()){
    cout << "\tsecond" <<endl;
    _pTree = _pTree->_last;
    _index = 0;
    if( goLeft()){
      cout << "\t_last goLeft()"<<endl;
    }

  // Last resort go to parent
  }else{
    cout << "\tthird"<<endl;

      btree<T>* atTree = _pTree;
    while(_pTree != nullptr){
    cout << "index " << _index << " " << _pTree->_vec.size()<<endl;
      btree<T>* prev = _pTree;
      _pTree = _pTree->_parent;
      // if the last value is truly the last, dont leave it
      if( _pTree == nullptr){
        _pTree = atTree;
        cout << "nullptr" <<endl;
        return *this;
      }
      // if parents parent is solution?
      if( _pTree->_last == prev){
        cout << "\t\tlast==prev"<<endl;
        cout << "\tvalue=" << *_pTree<<endl;
        bool x = _pTree->_parent == nullptr;
        cout << "\t" <<"is parent null? =  " << x <<endl;
        continue;
      } 
      cout << " before while" <<endl;
      /*
      cout <<"output _pTree "<< *_pTree<<endl;
      cout << "_vec.size() = " << _pTree->_vec.size()<<endl;
      bool x = _pTree->_last == nullptr;
      cout << "is _last null? =" << x <<endl;
      auto t = _pTree->_vec.back().first;
      cout << "output error: " <<t <<endl;
      */
      cout << " after while" <<endl;


      
      if( _pTree->_last == nullptr && _pTree->_vec.back().second == prev){
    cout << "\t\tback==prev"<<endl;
        continue;
      }
    cout << "\t\tfor loop"<<endl;
      for( size_t i=0; i< _pTree->_vec.size(); ++i){
        if( _pTree->_vec[i].second == prev ){
          _index = i+1;
          break;
        }
      }
      if(goLeft()){
        cout << "going backwards goLeft()"<<endl;
      }

      cout << "\treturn 2"<<endl;
      return *this;
    }
  }
  cout << "\treturn"<<endl;
  return *this;
}
template <typename T>
bool btree_iterator<T>::operator==(const btree_iterator<T>& other){
  // Same root node?
  if( this->_root != other._root){
    return false;
  }
  // is it pointing to the same element?
  if( this->_pTree == other._pTree && this->_index == other._index){
    return true;
  }
  // All other cases they cant be equal
  return false;
}
template <typename T>
bool btree_iterator<T>::operator!=(const btree_iterator<T>& other){
  return !this==(other);
}
template <typename T>
btree_iterator<T>::btree_iterator( btree<T>* root): _root(root), _pTree(root),_index(0){
  goLeft();
}
template <typename T>
btree_iterator<T>::btree_iterator( btree<T>* pTree, size_t index): _pTree(pTree), _index(index){
  btree<T> *temp = _pTree;
  // find and set the root node
  while(temp->_parent != nullptr){
    temp = temp->_parent;
  }
  _root = temp;
  cout << "btree_iterator ctor printing root: " <<*_root << endl;
  // it wants end()
  if( _index >= _root->_maxNodeElems){
    cout << "it wants end()"<<endl;
    _pTree = _root;
    goRight();
    _index = _pTree->_vec.size();
  }
}

/**
  *
  * const iterator
  *
  */

template <typename T>
const T& const_btree_iterator<T>::operator*() const{
  return holder;
}
// TODO write const T* as typedef pointer
template <typename T>
const T* const_btree_iterator<T>::operator->() const{
  return &holder;
}
template <typename T>
const_btree_iterator<T>& const_btree_iterator<T>::operator++() {

  return this;
}
template <typename T>
bool const_btree_iterator<T>::operator==(const const_btree_iterator<T>& other){
  return true;
}
template <typename T>
bool const_btree_iterator<T>::operator!=(const const_btree_iterator<T>& other){
  return true;
}
template <typename T>
const_btree_iterator<T>::const_btree_iterator( btree<T>* pTree): _pTree(pTree){
}
/**
  *
  * private helper functions
  *
  */
// from _pTree tries to go so deep and to the left as possible
template<typename T>
bool btree_iterator<T>::goLeft(){
  cout << "goLeft - ";
  bool result = false;
  if( _pTree->_vec.empty() ){
    cout << "goLeft - Warning no elements";
    _pTree = nullptr;
    return true;
  }
  while( !_pTree->_vec[_index].second->isEmpty() ){
  cout << "goLeft - WARNING";
    _pTree = _pTree->_vec[_index].second;
    _index = 0;
    result = true;
  }
  if( result){
    cout << "true"<<endl;
  }else{
    cout << "false"<<endl;
  }
  return result;
}
template<typename T>
bool btree_iterator<T>::goRight(){
  cout << "goRight - "<<endl;
  // Guarding
  if( _pTree -> _vec.size() <= _index && _pTree->_last == nullptr ){
    cout << " first reached end"<<endl;
    return false;
  }
  if( _pTree -> _vec.size() <= _index && _pTree->_last != nullptr && _pTree->_last->isEmpty()){
    cout << " change index" <<endl;
    _index = _pTree->_vec.size()-1;
  }
  // if _index is to high then _last is the correct way
  if( _pTree -> _vec.size() <= _index && _pTree->_last != nullptr && !_pTree->_last->isEmpty()){
    cout << " second recursive"<<endl;
    _pTree = _pTree->_last;
    // next node is also the _last node
    if( _pTree->_last != nullptr && !_pTree->_last->isEmpty()){
      _index = _pTree->_maxNodeElems;
    }else{
      _index = _pTree ->_vec.size()-1;
    }
    goRight();
    return true;
  }
  cout << " halfway" << endl;
  cout << " index=(" <<_index << ") , vec.size=(" << _pTree->_vec.size()<<")"<<endl;

  if( !_pTree->_vec[_index].second->isEmpty()){
    cout << " third iterate" <<endl;
    _pTree = _pTree->_vec[_index].second;
    // next node is also the _last node
    if( _pTree->_last != nullptr && !_pTree->_last->isEmpty()){
      _index = _pTree->_maxNodeElems;
    }else{
      _index = _pTree ->_vec.size()-1;
    }
    goRight();
    return true;
    
  }
  return false;
}
/**
template<typename T>
bool btree_iterator<T>::isLastSmaller(const T& elem){
  if( _pTree->_last == nullptr){
    return true;
  }else if( _pTree->isEmpty()){
    return true;
  }else if(_pTree->_vec[0].first < elem ){
  }
}
*/
